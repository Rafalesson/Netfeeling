# Definimos uma rede customizada para nossos serviços. 
# Isso permite que eles se comuniquem usando seus nomes (ex: 'kafka', 'mongodb').
networks:
  netfeeling-network:
    driver: bridge

# Aqui listamos todos os nossos "containers" de infraestrutura.
services:
  # Zookeeper é um requisito do Kafka. Ele gerencia o estado do cluster Kafka.
  # Pense nele como o "gerente" da equipe Kafka.
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - netfeeling-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  # O Kafka é nosso middleware orientado a mensagens. O coração da comunicação assíncrona.
  kafka:
    image: confluentinc/cp-kafka:7.0.1
    hostname: kafka
    container_name: kafka
    networks:
      - netfeeling-network
    depends_on:
      - zookeeper
    ports:
      # Expomos a porta 9092 para que nossos serviços possam se conectar ao Kafka.
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
  # Nosso banco de dados NoSQL para armazenar os dados das notícias e análises.
  mongodb:
    image: mongo:latest
    container_name: mongodb
    networks:
      - netfeeling-network
    ports:
      # Expomos a porta 27017 para podermos conectar e inspecionar o banco.
      - "27017:27017"
    volumes:
      # Este volume garante que os dados do MongoDB não sejam perdidos se o container parar.
      - mongo-data:/data/db
  
  coletor-python:
    build: ./services/coletor-python
    container_name: coletor-python
    ports:
      - "8000:8000"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=noticias_coletadas
      - NEWS_API_KEY=${NEWS_API_KEY}
    networks:
      - netfeeling-network
    depends_on:
      kafka:
        condition: service_healthy

  analise-python:
        build: ./services/analise-python
        container_name: analise-python
        environment:
          # Ele precisa das mesmas variáveis para saber onde se conectar
          - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
          - KAFKA_TOPIC=noticias_coletadas
        networks:
          - netfeeling-network
        depends_on:
          - kafka
          - coletor-python

# Define o volume que usamos acima para persistir os dados do MongoDB.
volumes:
  mongo-data:
    driver: local